{
  "name": "transparency",
  "version": "0.9.14",
  "description": "Transparency is a minimal template engine for browsers. It maps JSON objects to DOM elements with zero configuration.",
  "homepage": "https://github.com/leonidas/transparency",
  "repository": {
    "type": "git",
    "url": "https://github.com/leonidas/transparency.git"
  },
  "keywords": [
    "template",
    "templating",
    "engine",
    "unobtrusive",
    "semantic"
  ],
  "author": {
    "name": "Jarno Keskikangas",
    "email": "jarno.keskikangas@leonidasoy.fi"
  },
  "contributors": [
    {
      "name": "Janne Hietam√§ki",
      "email": "janne.hietamaki@leonidasoy.fi"
    },
    {
      "name": "Sami Hangaslammi",
      "email": "sami.hangaslammi@leonidasoy.fi"
    },
    {
      "name": "Toni Jyrkinen",
      "email": "toni.jyrkinen@leonidasoy.fi"
    },
    {
      "name": "Antti Tarvainen",
      "email": "antti.tarvainen@leonidasoy.fi"
    },
    {
      "name": "Tomi Laine",
      "email": "tomi.laine@leonidasoy.fi"
    },
    {
      "name": "Mikko Ohtamaa",
      "email": "mikko@opensourcehacker.com"
    }
  ],
  "licenses": [
    "MIT"
  ],
  "dependencies": {
    "jsdom": "~0.5.0",
    "coffee-script": "~1.6.2"
  },
  "devDependencies": {
    "jquery": "~1.8.3",
    "grunt": "~0.4.0",
    "grunt-jasmine-task": "~0.2.3",
    "grunt-docco": "git://github.com/bdougherty/grunt-docco.git#grunt-0.4",
    "grunt-contrib-jasmine": "~0.3.2",
    "grunt-template-jasmine-requirejs": "~0.1.0",
    "james-coffee": "~0.1.1",
    "james": "~0.1.5",
    "james-uglify": "~0.1.0",
    "coffeeify": "~0.1.0",
    "browserify": "~2.7.2",
    "jasmine-node": "~1.4.0"
  },
  "scripts": {
    "test": "grunt test && jasmine-node spec/serverSpec.js"
  },
  "testling": {
    "html": "Testling.html",
    "browsers": [
      "ie/8..latest",
      "chrome/23..latest",
      "firefox/17..latest",
      "safari/5.1..latest",
      "opera/11.5..latest",
      "iphone/6",
      "ipad/6"
    ]
  },
  "readme": "# Synopsis\n\nTransparency is a client-side template engine which binds data to DOM. Just call `.render(data)`.\n\n```html\n<div id=\"template\">\n  <span class=\"greeting\"></span>\n  <span data-bind=\"name\"></span>\n</div>\n```\n\n```js\nvar hello = {\n  greeting: 'Hello',\n  name:     'world!'\n};\n\n$('#template').render(hello);\n```\n\n```html\n<div id=\"template\">\n  <span class=\"greeting\">Hello</span>\n  <span data-bind=\"name\">world!</span>\n</div>\n```\n\n[![Build Status](https://secure.travis-ci.org/leonidas/transparency.png?branch=master)](http://travis-ci.org/leonidas/transparency)\n\n## Features\n\n* **Semantic data binding** - No need for `<%=foo%>` or `{{foo}}` assignments\n* **Collection rendering** - No need for hand-written loops\n* **Valid HTML templates** - Write templates as a part of the HTML, in plain HTML\n* **View logic in JavaScript** - No crippled micro-template language, just plain JavaScript functions\n\nTransparency is compatible with IE9+, Chrome, Firefox, iOS, Android and other mobile browsers. Support for IE8 requires jQuery.\n\n[![browser support](https://ci.testling.com/leonidas/transparency.png)](https://ci.testling.com/leonidas/transparency)\n\n## Community\n\n* IRC: [freenode/#transparency.js](http://webchat.freenode.net/)\n* Google Groups: transparencyjs@googlegroups.com\n\n## Fiddle\n\n[Try Transparency](http://leonidas.github.com/transparency/) with interactive examples.\n\n## Install\n\n```\ncurl https://raw.github.com/leonidas/transparency/master/dist/transparency.min.js\n\n# Or with Bower\nnpm install -g bower\nbower install transparency\n```\n\n#### Require with script tags\n\n```html\n<script src=\"js/jquery-1.7.1.min.js\"></script>\n<script src=\"js/transparency.min.js\"></script>\n```\n\n#### or with AMD\n\n```javascript\nrequire(['jquery', 'transparency'], function($, Transparency) {\n\n  // Without jQuery\n  Transparency.render(document.getElementById('template'), data);\n\n  // With jQuery\n  jQuery.fn.render = Transparency.jQueryPlugin;\n  $('#template').render(data);\n});\n```\n\n#### Node.js\n\n`npm install transparency`\n\nFor server-side use, see\n[examples/hello-server](https://github.com/leonidas/transparency/tree/master/examples/hello-server).\n\n## API documentation\n\nHere are short and detailed examples how to use Transparency. For more elaborate examples, see\n[User manual](https://github.com/leonidas/transparency/wiki/User-Manual) and\n[FAQ](https://github.com/leonidas/transparency/wiki/Frequently-Asked-Questions).\nFeel free to add your own examples in the wiki, too!\n\nImplementation details are explained in the\n[annotated source code](http://leonidas.github.com/transparency/docs/transparency.html).\n\n### Binding values\n\nTransparency binds values in-place. That means, you don't need to write separate template sections on your page.\nInstead, compose just a normal, static html page and start binding some dynamic values on it!\n\nBy default, Transparency binds JavaScript objects to a DOM element by `id`, `class`,`name` attribute and\n`data-bind` attribute. Default behavior can be changed by providing a custom matcher function, as explained in section\n[Configuration](https://github.com/leonidas/transparency#configuration). Values are escaped before rendering.\n\nTemplate:\n\n```html\n<div id=\"container\">\n  <div id=\"hello\"></div>\n  <div class=\"goodbye\"></div>\n  <input type=\"text\" name=\"greeting\" />\n  <button class=\"hi-button\" data-bind=\"hi-label\"></button>\n</div>\n```\n\nJavascript:\n\n```js\nvar hello = {\n  hello:      'Hello',\n  goodbye:    '<i>Goodbye!</i>',\n  greeting:   'Howdy!',\n  'hi-label': 'Terve!' // Finnish i18n\n};\n\n// with jQuery\n$('#container').render(hello);\n\n// ..or without\nTransparency.render(document.getElementById('container'), hello);\n```\n\nResult:\n\n```html\n<div class=\"container\">\n  <div id=\"hello\">Hello</div>\n  <div class=\"goodbye\">lt;i&gt;Goodbye!&lt;/i&gt;</div>\n  <input type=\"text\" name=\"greeting\" value=\"Howdy!\" />\n  <button class=\"hi-button\" data-bind=\"hi-label\">Terve!</button>\n</div>\n```\n\n### Rendering a list of models\n\nTemplate:\n\n```html\n<ul id=\"activities\">\n  <li class=\"activity\"></li>\n</ul>\n```\n\nJavascript:\n\n```js\nvar activities = [\n  {activity: 'Jogging'},\n  {activity: 'Gym'},\n  {activity: 'Sky Diving'},\n];\n\n$('#activities').render(activities);\n\n// or\nTransparency.render(document.getElementById('activities'), activities);\n```\n\nResult:\n\n```html\n<ul id=\"activities\">\n  <li class=\"activity\">Jogging</li>\n  <li class=\"activity\">Gym</li>\n  <li class=\"activity\">Sky Diving</li>\n</ul>\n```\n\n#### Rendering a list of plain values\n\nWith plain values, Transparency can't guess how you would like to bind the data to DOM, so a bit of\nhelp is needed. Directives are just for that.\n\nAccess to the plain values within the directives is provided through `this.value`. There's a whole\nlot more to say about the directives, but that's all we need for now. For the details, see\nsection [Directives](https://github.com/leonidas/transparency#directives).\n\nTemplate:\n\n```html\n<div>\n  <div class=\"comments\">\n    <label>Comments:</label><span class=\"comment\"></span>\n  </div>\n</div>\n```\n\nJavascript:\n\n```js\nvar comments, directives;\n\ncomments = [\"That rules\", \"Great post!\"];\n\n// See section 'Directives' for the details\ndirectives = {\n  comment: {\n    text: function() {\n      return this.value;\n    }\n  }\n};\n\n$('.comments').render(comments, directives);\n```\n\nResult:\n\n```html\n<div>\n  <div class=\"comments\">\n    <label>Comments</label><span class=\"comment\">That rules</span>\n    <label>Comments</label><span class=\"comment\">Great post!</span>\n  </div>\n</div>\n```\n\n### Nested lists\n\nTemplate:\n\n```html\n<div class=\"container\">\n  <h1 class=\"title\"></h1>\n  <p class=\"post\"></p>\n  <div class=\"comments\">\n    <div class=\"comment\">\n      <span class=\"name\"></span>\n      <span class=\"text\"></span>\n    </div>\n  </div>\n</div>\n```\n\nJavascript:\n\n```js\nvar post = {\n  title:    'Hello World',\n  post:     'Hi there it is me',\n  comments: [ {\n      name: 'John',\n      text: 'That rules'\n    }, {\n      name: 'Arnold',\n      text: 'Great post!'\n    }\n  ]\n};\n\n$('.container').render(post);\n```\n\nResult:\n\n```html\n<div class=\"container\">\n  <h1 class=\"title\">Hello World</h1>\n  <p class=\"post\">Hi there it is me</p>\n  <div class=\"comments\">\n    <div class=\"comment\">\n      <span class=\"name\">John</span>\n      <span class=\"text\">That rules</span>\n    </div>\n    <div class=\"comment\">\n      <span class=\"name\">Arnold</span>\n      <span class=\"text\">Great post!</span>\n    </div>\n  </div>\n</div>\n```\n\n### Nested objects\n\nTemplate:\n\n```html\n<div class=\"person\">\n  <div class=\"firstname\"></div>\n  <div class=\"lastname\"></div>\n  <div class=\"address\">\n    <div class=\"street\"></div>\n    <div class=\"zip\"><span class=\"city\"></span></div>\n  </div>\n</div>\n```\n\nJavascript:\n\n```js\nvar person = {\n  firstname: 'John',\n  lastname:  'Wayne',\n  address: {\n    street: '4th Street',\n    city:   'San Francisco',\n    zip:    '94199'\n  }\n};\n\n$('.person').render(person);\n```\n\nResult:\n\n```html\n<div class=\"container\">\n  <div class=\"firstname\">John</div>\n  <div class=\"lastname\">Wayne</div>\n  <div class=\"address\">\n    <div class=\"street\">4th Street</div>\n    <div class=\"zip\">94199<span class=\"city\">San Francisco</span></div>\n  </div>\n</div>\n```\n\n### Directives\n\nDirectives are actions Transparency performs while rendering the templates. They can be used for setting element\n`text` or `html` content and attribute values, e.g., `class`, `src` or `href`.\n\nDirectives are plain javascript functions defined in a two-dimensional object literal, i.e.,\n\n`directives[element][attribute] = function(params) {...}`\n\nwhere `element` is value of `id`, `class`, `name` attribute or `data-bind` attribute of the target element. Similarly,\n`attribute` is the name of the target attribute.\n\nWhen a directive function is executed, `this` is bound to the current model object. In addition, the directive function\nreceives current element as `params.element`, current index as `params.index` and current value as `params.value`.\n\nThe return value of a directive function is assigned to the matching element attribute. The return value should be\nstring, number or date.\n\nTemplate:\n\n```html\n<div class=\"person\">\n  <span class=\"name\">My name is </span>\n  <a class=\"email\"></a>\n</div>\n```\n\nJavascript:\n\n```js\nvar person, directives;\n\nperson = {\n  firstname: 'Jasmine',\n  lastname:  'Taylor',\n  email:     'jasmine.tailor@example.com'\n};\n\ndirectives = {\n  name: {\n    text: function(params) {\n      return params.value + this.firstname + \" \" + this.lastname;\n    }\n  },\n\n  email: {\n    href: function(params) {\n      return \"mailto:\" + this.email;\n    }\n  }\n};\n\n$('.person').render(person, directives);\n```\n\nResult:\n\n```html\n<div class=\"person\">\n  <span class=\"name\">My name is Jasmine Taylor</span>\n  <a class=\"email\" href=\"mailto:jasmine.tailor@example.com\">jasmine.tailor@example.com</a>\n</div>\n```\n\n### Nested directives\n\nTemplate:\n\n```html\n<div class=\"person\">\n  <span class=\"name\"></span>\n  <span class=\"email\"></span>\n  <div class=\"friends\">\n    <div class=\"friend\">\n      <span class=\"name\"></span>\n      <span class=\"email\"></span>\n    </div>\n  </div>\n</div>\n```\n\nJavascript:\n\n```js\nperson = {\n  firstname:  'Jasmine',\n  lastname:   'Taylor',\n  email:      'jasmine.taylor@example.com',\n  friends:    [ {\n      firstname: 'John',\n      lastname:  'Mayer',\n      email:     'john.mayer@example.com'\n    }, {\n      firstname: 'Damien',\n      lastname:  'Rice',\n      email:     'damien.rice@example.com'\n    }\n  ]\n};\n\nnameDecorator = function() { \"<b>\" + this.firstname + \" \" + this.lastname + \"</b>\"; };\n\ndirectives = {\n  name: { html: nameDecorator },\n\n  friends: {\n    name: { html: nameDecorator }\n  }\n};\n\n$('.person').render(person, directives);\n```\n\nResult:\n\n```html\n<div class=\"person\">\n  <span class=\"name\"><b>Jasmine Taylor</b></span>\n  <span class=\"email\">jasmine.taylor@example.com</span>\n  <div class=\"friends\">\n    <div class=\"friend\">\n      <span class=\"name\"><b>John Mayer</b></span>\n      <span class=\"email\">john.mayer@example.com</span>\n    </div>\n    <div class=\"friend\">\n      <span class=\"name\"><b>Damien Rice</b></span>\n      <span class=\"email\">damien.rice@example.com</span>\n    </div>\n  </div>\n</div>\n```\n\n## Configuration\n\nTransparency can be configured to use custom matcher for binding the values to DOM elements.\n\nFor example, one might want to bind only with `data-bind` attribute, but not with `class` or `id` attributes.\nCustom matcher function should take `key` and `element` as parameters and return `true` if the\ncorresponding value should be bind to the given DOM element.\n\n```javascript\n// The custom matcher gets Transparency `Element` wrapper with following properties\n// element.el:         Raw DOM element\n// element.name:       Lower-cased name of the DOM element, e.g., 'input'\n// element.classNames: List of class names of the DOM element, e.g., ['person', 'selected']\nTransparency.matcher = function(element, key) {\n  return element.el.getAttribute('data-bind') == key;\n};\n\n// Values are bind only with 'data-bind' attribute\ntemplate.render({name: \"Will Smith\"});\n```\n\n## Debugging templates, data and Transparency\n\nhttp://leonidas.github.com/transparency/ is great place to fiddle around with your data and templates.\n\nTo enable debug mode, call `.render` with a `{debug: true}` config and open the javascript console.\n\n```javascript\n$('container').render(data, {}, {debug: true});\n```\n\n## Development environment\n\nInstall node.js 0.8.x and npm. Then, in the project folder\n\n    $ npm install grunt -g  # command-line build tool to enable TDD, auto-complation and minification\n    $ npm install           # Install the development dependencies\n    $ grunt                 # Compile, run tests, minify and start watching for modifications\n\nThe [annotated source code](http://leonidas.github.com/transparency/docs/transparency.html) should\ngive a decent introduction.\n\n## Contributing\n\nAll the following are appreciated, in an asceding order of preference\n\n1. A feature request or a bug report\n2. Pull request with a failing unit test\n3. Pull request with unit tests and corresponding implementation\n\nIn case the contribution is changing Transparency API, please create a ticket first in order to discuss and\nagree on design.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/leonidas/transparency/issues"
  },
  "_id": "transparency@0.9.14",
  "_from": "transparency@"
}
